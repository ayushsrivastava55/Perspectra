// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences - stored as JSON string for SQLite compatibility
  preferredPersonas String @default("[\"system1\", \"system2\", \"moderator\", \"devilsAdvocate\"]")
  theme            String   @default("light")
  
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  customPersonas Persona[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id          String   @id @default(cuid())
  title       String
  problem     String
  status      ConversationStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messages    Message[]
  
  // Conversation metadata - stored as JSON string for SQLite compatibility
  totalMessages    Int @default(0)
  activePersonas   String @default("[\"system1\", \"system2\", \"moderator\", \"devilsAdvocate\"]")
  conversationMode String @default("manual") // manual, auto, guided
  
  @@index([userId, createdAt])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  persona        String   // PersonaType or 'user'
  timestamp      DateTime @default(now())
  factChecked    Boolean  @default(false)
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Message metadata
  messageType    MessageType @default(STANDARD)
  sentiment      Float?      // -1 to 1, negative to positive
  confidence     Float?      // 0 to 1, AI confidence in response
  
  @@index([conversationId, timestamp])
}

model Persona {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  systemPrompt String
  icon        String
  color       String
  isActive    Boolean  @default(true)
  isCustom    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // For custom personas
  createdBy   String?
  creator     User?    @relation(fields: [createdBy], references: [id])
  
  @@index([isActive, isCustom])
}

enum ConversationStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum MessageType {
  STANDARD
  SYSTEM
  BIAS_ALERT
  TOPIC_EVOLUTION
  SUMMARY
}
